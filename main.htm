<html
    window-resizable="true"
    window-width="800dip"
    window-height="600dip"
>
<head>
<title>sciter promise demo</title>
<style>

@import url(node_modules/sciter-logger/src/logger.css);

</style>
<script type="module">

import Logger from "node_modules/sciter-logger/src/logger.js";
import * as Utils from "node_modules/sciter-utils/src/utils.js";

import {waitAsyncAwait, waitThen} from "js/wait.js";
import * as file1 from "js/file1.js";
import * as file2 from "js/file2.js";

// initialize logger
Logger.init();

// attach logger to console
Logger.attach();

// capture unhandled exceptions
Logger.capture();

document.on("ready", function() {
    // subscribe to logger messages
    Logger.plaintext(document.$("plaintext#logger"));

    // log sciter version
    console.debug(Utils.sciterInfo());

    // add support for F5 reload
    Utils.addReloadWindow();

    // close window on escape key press
    Utils.closeWindowOnEscape(Window.this);

    // center window on screen
    Utils.centerWindow(Window.this, "screen");

    // bring window to front and set input focus
    Window.this.activate(true);

    // file async example
    // open file asynchronously
    file1.file.open(URL.toPath(__DIR__ + "test1.txt"));

    console.warn("write fails because file is not yet open (async execution did not take place)");
    file1.file.write("test");

    console.warn("close fails because file is not yet open (async execution did not take place)");
    file1.file.close();

    // file async example
    // open file asynchronously
    file2.file.open(URL.toPath(__DIR__ + "test2.txt"))
        .then(() => {
            file2.file.write("test");
            console.note("write success");
            file2.file.close();
            console.note("close success");
        });

    // 2
    // wait example
    console.log("Call wait...");

    // option 1
    const result = waitAsyncAwait();
    console.debug(`waitAsyncAwait - ${result}`);

    // option 2
    waitThen();

    console.log("Call wait - OK");

    // 3
    // immediately invoked async function
    (async function() {
        await Promise.resolve(console.log("immediately invoked async function"));
    })();
});

</script>
</head>
<body>
    <plaintext #logger readonly />
</body>
</html>
